{
  "address": "0x3C13be58A557876AcaE4f3FD8BDAE456B974fa97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entrancefee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "subscription",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughtETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaflleIsClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle___WithdrawalFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        }
      ],
      "name": "RequestedRaffleWinners",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c187e2c6cf025fb4ef6ae681065dad2109cd0402e40233ec1b96482ce5bd142",
  "receipt": {
    "to": null,
    "from": "0x3426D106f5de9ac55cCA854BecEd616951360596",
    "contractAddress": "0x3C13be58A557876AcaE4f3FD8BDAE456B974fa97",
    "transactionIndex": 101,
    "gasUsed": "1401734",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7d0ecd07dec2d2195d5f762f65ffbb18b1fdf12c1134971c8b11a978b043b64e",
    "transactionHash": "0x8c187e2c6cf025fb4ef6ae681065dad2109cd0402e40233ec1b96482ce5bd142",
    "logs": [],
    "blockNumber": 9670533,
    "cumulativeGasUsed": "28201430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "0",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "d57bed60e6389127e3b34d2edb47a3ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entrancefee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"subscription\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughtETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaflleIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle___WithdrawalFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__upKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"RequestedRaffleWinners\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Olorunfemi Tayo\",\"details\":\"This implements chainlink VRF2 and chainlink keepers.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\nerror Raffle__NotEnoughtETH();\\nerror Raffle___WithdrawalFailed();\\nerror Raffle__RaflleIsClosed();\\nerror Raffle__upKeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numberOfPlayers,\\n    uint256 raffleState\\n);\\n// Raffle Steps\\n// 1. Enter the Lottery\\n// 2. Pick a Random Winner(Verifiably Random)\\n// 3. Winner to be Selected every X minute (Completely Automated)\\n\\n// import chainlink contracts\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\n/**\\n * @title A sample Raffle Contract\\n * @author Olorunfemi Tayo\\n * @notice This contract is for creating a untamperable decentralized smart contract\\n * @dev This implements chainlink VRF2 and chainlink keepers.\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    // Type Declaration\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    // State Variales\\n    uint256 private immutable i_entracefee; // immutable variables are cheap (gas wise)\\n    address payable[] private s_players; // we added the paybale keyword because one of the address would be the winner and would recieve eth.\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint16 private immutable i_subscription;\\n    uint16 private constant CONFIRMATION_REQUEST = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    address[] private s_winners;\\n    // Events\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event RequestedRaffleWinners(address[] indexed winners);\\n    // Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastBlockTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    constructor(\\n        address vrfCoordinatorV2, // contract\\n        uint256 entrancefee,\\n        bytes32 gasLane,\\n        uint16 subscription,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_entracefee = entrancefee;\\n        i_gasLane = gasLane;\\n        i_subscription = subscription;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastBlockTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    // Enter Raffle\\n    function enterRaffle() public payable {\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__RaflleIsClosed();\\n        }\\n        if (msg.value < i_entracefee) {\\n            revert Raffle__NotEnoughtETH();\\n        }\\n        s_players.push(payable(msg.sender)); // add players to array of players\\n        emit RaffleEnter(msg.sender); // emit even with the address of a player (we emit an event when we update a dynamic array or mapping)\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upKeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_lastBlockTimeStamp) >\\n            i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance); // if all this is true its time to request a new random number and it is time to end the lottery.\\n        return (upKeepNeeded, bytes(\\\"\\\"));\\n    }\\n\\n    // Pick Random Winner using chainlink VRF\\n    function performUpkeep(bytes calldata /*performData */) external override {\\n        (bool upKeePNeeded, ) = checkUpkeep(bytes(\\\" \\\"));\\n        if (!upKeePNeeded) {\\n            revert Raffle__upKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        // Will revert if subscription is not set and funded.\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // gasLane\\n            i_subscription,\\n            CONFIRMATION_REQUEST,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256,\\n        // requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0); // we reset our players array after selecting a winner\\n        s_lastBlockTimeStamp = block.timestamp; // we reset timestamp after selecting a winner\\n        (bool callSuccess, ) = recentWinner.call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        if (!callSuccess) {\\n            revert Raffle___WithdrawalFailed();\\n        }\\n        s_winners.push(s_recentWinner);\\n        emit RequestedRaffleWinners(s_winners);\\n    }\\n\\n    // View and Pure Functions\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entracefee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getWinners() public view returns (address[] memory) {\\n        return s_winners;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint32) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return s_lastBlockTimeStamp;\\n    }\\n}\\n\",\"keccak256\":\"0x893fa7dfecf887a31e70674a2d5d7f7a8d09ab15724b746e6db9943f2f609e29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001b8838038062001b88833981810160405281019062000038919062000282565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508460a081815250508360e081815250508261ffff166101008161ffff16815250508163ffffffff166101208163ffffffff16815250506000600260146101000a81548160ff021916908360018111156200010157620001006200031e565b5b0217905550426003819055508061014081815250505050505050506200034d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001548262000127565b9050919050565b620001668162000147565b81146200017257600080fd5b50565b60008151905062000186816200015b565b92915050565b6000819050919050565b620001a1816200018c565b8114620001ad57600080fd5b50565b600081519050620001c18162000196565b92915050565b6000819050919050565b620001dc81620001c7565b8114620001e857600080fd5b50565b600081519050620001fc81620001d1565b92915050565b600061ffff82169050919050565b6200021b8162000202565b81146200022757600080fd5b50565b6000815190506200023b8162000210565b92915050565b600063ffffffff82169050919050565b6200025c8162000241565b81146200026857600080fd5b50565b6000815190506200027c8162000251565b92915050565b60008060008060008060c08789031215620002a257620002a162000122565b5b6000620002b289828a0162000175565b9650506020620002c589828a01620001b0565b9550506040620002d889828a01620001eb565b9450506060620002eb89828a016200022a565b9350506080620002fe89828a016200026b565b92505060a06200031189828a01620001b0565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516117cb620003bd6000396000818161083801526108bb015260006106c20152600061069f0152600061067e015260006106420152600081816102fa0152610464015260008181610337015261038b01526117cb6000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461024a578063df15c37e14610275578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b8063473f1ddc146101b657806353a2c19a146101e15780636e04ff0d1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063460e204914610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610cf9565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d8b565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610f3f565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610ff6565b610564565b005b34801561018557600080fd5b506101a0600480360381019061019b9190611043565b61077b565b6040516101ad91906110b1565b60405180910390f35b3480156101c257600080fd5b506101cb6107c2565b6040516101d891906110b1565b60405180910390f35b3480156101ed57600080fd5b506101f66107ec565b60405161020391906110eb565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e91906111bb565b6107f5565b60405161024192919061129e565b60405180910390f35b34801561025657600080fd5b5061025f6108b7565b60405161026c9190610cf9565b60405180910390f35b34801561028157600080fd5b5061028a6108df565b604051610297919061138c565b60405180910390f35b3480156102ac57600080fd5b506102b561096d565b6040516102c29190610cf9565b60405180910390f35b3480156102d757600080fd5b506102e0610977565b6040516102ed9190610cf9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906113ae565b60405180910390fd5b6103f18282610983565b5050565b6000600181111561040957610408610d14565b5b600260149054906101000a900460ff16600181111561042b5761042a610d14565b5b14610462576040517fe64195df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156104bc576040517f3284cf4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105a46040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152506107f5565b509050806106135747600080549050600260149054906101000a900460ff1660018111156105d5576105d4610d14565b5b6040517f43df4e3d00000000000000000000000000000000000000000000000000000000815260040161060a939291906113d7565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561063957610638610d14565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610703959493929190611493565b6020604051808303816000875af1158015610722573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074691906114fb565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008082815481106107905761078f611528565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b600060606000600260149054906101000a900460ff16600181111561081d5761081c610d14565b5b6000600181111561083157610830610d14565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426108659190611586565b119050600080600080549050119050600080471190508380156108855750825b801561088e5750815b80156108975750805b955085604051806020016040528060008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561096357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610919575b5050505050905090565b6000600354905090565b60008080549050905090565b600080805490508260008151811061099e5761099d611528565b5b60200260200101516109b091906115e9565b905060008082815481106109c7576109c6611528565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115610a5b57610a5a610d14565b5b0217905550600067ffffffffffffffff811115610a7b57610a7a610dfc565b5b604051908082528060200260200182016040528015610aa95781602001602082028036833780820191505090505b5060009080519060200190610abf929190610c39565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aed9061164b565b60006040518083038185875af1925050503d8060008114610b2a576040519150601f19603f3d011682016040523d82523d6000602084013e610b2f565b606091505b5050905080610b6a576040517fef3279bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001604051610bfe919061177e565b60405180910390207f25f41bb500436b60823d3ac90c8445e63b823240530d3f308dc7202a3692092860405160405180910390a25050505050565b828054828255906000526020600020908101928215610cb2579160200282015b82811115610cb15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c59565b5b509050610cbf9190610cc3565b5090565b5b80821115610cdc576000816000905550600101610cc4565b5090565b6000819050919050565b610cf381610ce0565b82525050565b6000602082019050610d0e6000830184610cea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d5457610d53610d14565b5b50565b6000819050610d6582610d43565b919050565b6000610d7582610d57565b9050919050565b610d8581610d6a565b82525050565b6000602082019050610da06000830184610d7c565b92915050565b6000604051905090565b600080fd5b600080fd5b610dc381610ce0565b8114610dce57600080fd5b50565b600081359050610de081610dba565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e3482610deb565b810181811067ffffffffffffffff82111715610e5357610e52610dfc565b5b80604052505050565b6000610e66610da6565b9050610e728282610e2b565b919050565b600067ffffffffffffffff821115610e9257610e91610dfc565b5b602082029050602081019050919050565b600080fd5b6000610ebb610eb684610e77565b610e5c565b90508083825260208201905060208402830185811115610ede57610edd610ea3565b5b835b81811015610f075780610ef38882610dd1565b845260208401935050602081019050610ee0565b5050509392505050565b600082601f830112610f2657610f25610de6565b5b8135610f36848260208601610ea8565b91505092915050565b60008060408385031215610f5657610f55610db0565b5b6000610f6485828601610dd1565b925050602083013567ffffffffffffffff811115610f8557610f84610db5565b5b610f9185828601610f11565b9150509250929050565b600080fd5b60008083601f840112610fb657610fb5610de6565b5b8235905067ffffffffffffffff811115610fd357610fd2610f9b565b5b602083019150836001820283011115610fef57610fee610ea3565b5b9250929050565b6000806020838503121561100d5761100c610db0565b5b600083013567ffffffffffffffff81111561102b5761102a610db5565b5b61103785828601610fa0565b92509250509250929050565b60006020828403121561105957611058610db0565b5b600061106784828501610dd1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109b82611070565b9050919050565b6110ab81611090565b82525050565b60006020820190506110c660008301846110a2565b92915050565b600063ffffffff82169050919050565b6110e5816110cc565b82525050565b600060208201905061110060008301846110dc565b92915050565b600080fd5b600067ffffffffffffffff82111561112657611125610dfc565b5b61112f82610deb565b9050602081019050919050565b82818337600083830152505050565b600061115e6111598461110b565b610e5c565b90508281526020810184848401111561117a57611179611106565b5b61118584828561113c565b509392505050565b600082601f8301126111a2576111a1610de6565b5b81356111b284826020860161114b565b91505092915050565b6000602082840312156111d1576111d0610db0565b5b600082013567ffffffffffffffff8111156111ef576111ee610db5565b5b6111fb8482850161118d565b91505092915050565b60008115159050919050565b61121981611204565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561125957808201518184015260208101905061123e565b60008484015250505050565b60006112708261121f565b61127a818561122a565b935061128a81856020860161123b565b61129381610deb565b840191505092915050565b60006040820190506112b36000830185611210565b81810360208301526112c58184611265565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61130381611090565b82525050565b600061131583836112fa565b60208301905092915050565b6000602082019050919050565b6000611339826112ce565b61134381856112d9565b935061134e836112ea565b8060005b8381101561137f5781516113668882611309565b975061137183611321565b925050600181019050611352565b5085935050505092915050565b600060208201905081810360008301526113a6818461132e565b905092915050565b60006040820190506113c360008301856110a2565b6113d060208301846110a2565b9392505050565b60006060820190506113ec6000830186610cea565b6113f96020830185610cea565b6114066040830184610cea565b949350505050565b6000819050919050565b6114218161140e565b82525050565b600061ffff82169050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061146e61146961146484611427565b611449565b611435565b9050919050565b61147e81611453565b82525050565b61148d81611427565b82525050565b600060a0820190506114a86000830188611418565b6114b56020830187611475565b6114c26040830186611484565b6114cf60608301856110dc565b6114dc60808301846110dc565b9695505050505050565b6000815190506114f581610dba565b92915050565b60006020828403121561151157611510610db0565b5b600061151f848285016114e6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061159182610ce0565b915061159c83610ce0565b92508282039050818111156115b4576115b3611557565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115f482610ce0565b91506115ff83610ce0565b92508261160f5761160e6115ba565b5b828206905092915050565b600081905092915050565b50565b600061163560008361161a565b915061164082611625565b600082019050919050565b600061165682611628565b9150819050919050565b600081549050919050565b600081905092915050565b60008190508160005260206000209050919050565b61169481611090565b82525050565b60006116a6838361168b565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116f26116ed836116b2565b6116bf565b9050919050565b600061170582546116df565b9050919050565b6000600182019050919050565b600061172482611660565b61172e818561166b565b935061173983611676565b8060005b838110156117715761174e826116f9565b611758888261169a565b97506117638361170c565b92505060018101905061173d565b5085935050505092915050565b600061178a8284611719565b91508190509291505056fea2646970667358221220ccef9d5835f4317f3610c60beea2995c9bfc2951225c7a3bc0e7bb1a80d34a0664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461024a578063df15c37e14610275578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b8063473f1ddc146101b657806353a2c19a146101e15780636e04ff0d1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063460e204914610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610cf9565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d8b565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610f3f565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610ff6565b610564565b005b34801561018557600080fd5b506101a0600480360381019061019b9190611043565b61077b565b6040516101ad91906110b1565b60405180910390f35b3480156101c257600080fd5b506101cb6107c2565b6040516101d891906110b1565b60405180910390f35b3480156101ed57600080fd5b506101f66107ec565b60405161020391906110eb565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e91906111bb565b6107f5565b60405161024192919061129e565b60405180910390f35b34801561025657600080fd5b5061025f6108b7565b60405161026c9190610cf9565b60405180910390f35b34801561028157600080fd5b5061028a6108df565b604051610297919061138c565b60405180910390f35b3480156102ac57600080fd5b506102b561096d565b6040516102c29190610cf9565b60405180910390f35b3480156102d757600080fd5b506102e0610977565b6040516102ed9190610cf9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906113ae565b60405180910390fd5b6103f18282610983565b5050565b6000600181111561040957610408610d14565b5b600260149054906101000a900460ff16600181111561042b5761042a610d14565b5b14610462576040517fe64195df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156104bc576040517f3284cf4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105a46040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152506107f5565b509050806106135747600080549050600260149054906101000a900460ff1660018111156105d5576105d4610d14565b5b6040517f43df4e3d00000000000000000000000000000000000000000000000000000000815260040161060a939291906113d7565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561063957610638610d14565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610703959493929190611493565b6020604051808303816000875af1158015610722573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074691906114fb565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008082815481106107905761078f611528565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b600060606000600260149054906101000a900460ff16600181111561081d5761081c610d14565b5b6000600181111561083157610830610d14565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426108659190611586565b119050600080600080549050119050600080471190508380156108855750825b801561088e5750815b80156108975750805b955085604051806020016040528060008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561096357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610919575b5050505050905090565b6000600354905090565b60008080549050905090565b600080805490508260008151811061099e5761099d611528565b5b60200260200101516109b091906115e9565b905060008082815481106109c7576109c6611528565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115610a5b57610a5a610d14565b5b0217905550600067ffffffffffffffff811115610a7b57610a7a610dfc565b5b604051908082528060200260200182016040528015610aa95781602001602082028036833780820191505090505b5060009080519060200190610abf929190610c39565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aed9061164b565b60006040518083038185875af1925050503d8060008114610b2a576040519150601f19603f3d011682016040523d82523d6000602084013e610b2f565b606091505b5050905080610b6a576040517fef3279bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001604051610bfe919061177e565b60405180910390207f25f41bb500436b60823d3ac90c8445e63b823240530d3f308dc7202a3692092860405160405180910390a25050505050565b828054828255906000526020600020908101928215610cb2579160200282015b82811115610cb15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c59565b5b509050610cbf9190610cc3565b5090565b5b80821115610cdc576000816000905550600101610cc4565b5090565b6000819050919050565b610cf381610ce0565b82525050565b6000602082019050610d0e6000830184610cea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d5457610d53610d14565b5b50565b6000819050610d6582610d43565b919050565b6000610d7582610d57565b9050919050565b610d8581610d6a565b82525050565b6000602082019050610da06000830184610d7c565b92915050565b6000604051905090565b600080fd5b600080fd5b610dc381610ce0565b8114610dce57600080fd5b50565b600081359050610de081610dba565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e3482610deb565b810181811067ffffffffffffffff82111715610e5357610e52610dfc565b5b80604052505050565b6000610e66610da6565b9050610e728282610e2b565b919050565b600067ffffffffffffffff821115610e9257610e91610dfc565b5b602082029050602081019050919050565b600080fd5b6000610ebb610eb684610e77565b610e5c565b90508083825260208201905060208402830185811115610ede57610edd610ea3565b5b835b81811015610f075780610ef38882610dd1565b845260208401935050602081019050610ee0565b5050509392505050565b600082601f830112610f2657610f25610de6565b5b8135610f36848260208601610ea8565b91505092915050565b60008060408385031215610f5657610f55610db0565b5b6000610f6485828601610dd1565b925050602083013567ffffffffffffffff811115610f8557610f84610db5565b5b610f9185828601610f11565b9150509250929050565b600080fd5b60008083601f840112610fb657610fb5610de6565b5b8235905067ffffffffffffffff811115610fd357610fd2610f9b565b5b602083019150836001820283011115610fef57610fee610ea3565b5b9250929050565b6000806020838503121561100d5761100c610db0565b5b600083013567ffffffffffffffff81111561102b5761102a610db5565b5b61103785828601610fa0565b92509250509250929050565b60006020828403121561105957611058610db0565b5b600061106784828501610dd1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109b82611070565b9050919050565b6110ab81611090565b82525050565b60006020820190506110c660008301846110a2565b92915050565b600063ffffffff82169050919050565b6110e5816110cc565b82525050565b600060208201905061110060008301846110dc565b92915050565b600080fd5b600067ffffffffffffffff82111561112657611125610dfc565b5b61112f82610deb565b9050602081019050919050565b82818337600083830152505050565b600061115e6111598461110b565b610e5c565b90508281526020810184848401111561117a57611179611106565b5b61118584828561113c565b509392505050565b600082601f8301126111a2576111a1610de6565b5b81356111b284826020860161114b565b91505092915050565b6000602082840312156111d1576111d0610db0565b5b600082013567ffffffffffffffff8111156111ef576111ee610db5565b5b6111fb8482850161118d565b91505092915050565b60008115159050919050565b61121981611204565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561125957808201518184015260208101905061123e565b60008484015250505050565b60006112708261121f565b61127a818561122a565b935061128a81856020860161123b565b61129381610deb565b840191505092915050565b60006040820190506112b36000830185611210565b81810360208301526112c58184611265565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61130381611090565b82525050565b600061131583836112fa565b60208301905092915050565b6000602082019050919050565b6000611339826112ce565b61134381856112d9565b935061134e836112ea565b8060005b8381101561137f5781516113668882611309565b975061137183611321565b925050600181019050611352565b5085935050505092915050565b600060208201905081810360008301526113a6818461132e565b905092915050565b60006040820190506113c360008301856110a2565b6113d060208301846110a2565b9392505050565b60006060820190506113ec6000830186610cea565b6113f96020830185610cea565b6114066040830184610cea565b949350505050565b6000819050919050565b6114218161140e565b82525050565b600061ffff82169050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061146e61146961146484611427565b611449565b611435565b9050919050565b61147e81611453565b82525050565b61148d81611427565b82525050565b600060a0820190506114a86000830188611418565b6114b56020830187611475565b6114c26040830186611484565b6114cf60608301856110dc565b6114dc60808301846110dc565b9695505050505050565b6000815190506114f581610dba565b92915050565b60006020828403121561151157611510610db0565b5b600061151f848285016114e6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061159182610ce0565b915061159c83610ce0565b92508282039050818111156115b4576115b3611557565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115f482610ce0565b91506115ff83610ce0565b92508261160f5761160e6115ba565b5b828206905092915050565b600081905092915050565b50565b600061163560008361161a565b915061164082611625565b600082019050919050565b600061165682611628565b9150819050919050565b600081549050919050565b600081905092915050565b60008190508160005260206000209050919050565b61169481611090565b82525050565b60006116a6838361168b565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116f26116ed836116b2565b6116bf565b9050919050565b600061170582546116df565b9050919050565b6000600182019050919050565b600061172482611660565b61172e818561166b565b935061173983611676565b8060005b838110156117715761174e826116f9565b611758888261169a565b97506117638361170c565b92505060018101905061173d565b5085935050505092915050565b600061178a8284611719565b91508190509291505056fea2646970667358221220ccef9d5835f4317f3610c60beea2995c9bfc2951225c7a3bc0e7bb1a80d34a0664736f6c63430008130033",
  "devdoc": {
    "author": "Olorunfemi Tayo",
    "details": "This implements chainlink VRF2 and chainlink keepers.",
    "kind": "dev",
    "methods": {},
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 243,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 261,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_winners",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 276,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 279,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)238"
      },
      {
        "astId": 281,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastBlockTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)238": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}